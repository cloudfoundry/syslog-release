#!/bin/bash
set -ex

mkdir -p /var/vcap/store/syslog_storer
mkdir -p /var/vcap/data/syslog_storer/buffered
chown -R syslog:adm /var/vcap/data/syslog_storer/buffered
chown -R syslog:adm /var/vcap/store/syslog_storer

mkdir -p /etc/rsyslog.d
cp $(dirname $0)/../config/rsyslog.conf /etc/rsyslog.d/rsyslog.conf
if [ -d "/etc/apparmor.d/rsyslog.d/" ]; then
  cp $(dirname $0)/../config/syslog.apparmor /etc/apparmor.d/rsyslog.d/syslog.apparmor

  if command -v apparmor_parser &>/dev/null && [ -f "/etc/apparmor.d/usr.sbin.rsyslogd" ]; then
    apparmor_parser -r /etc/apparmor.d/usr.sbin.rsyslogd
  fi
fi

# Updated pre-start logic for rsyslog:
# In some environments (like BOSH Lite or VMs that are partially stopped),
# systemd may exist but the rsyslog.service unit can fail to start.
# Previously, we unconditionally tried `systemctl restart rsyslog`, which
# could fail and cause the pre-start to fail.
#
# Now, we first check if `systemctl` exists **and** if the rsyslog service
# unit is present. We attempt `systemctl restart` but fall back to
# `service rsyslog restart` if it fails. This ensures rsyslog starts
# reliably regardless of systemd state, VM state, or BOSH Lite limitations.

# if command -v systemctl &>/dev/null && systemctl list-unit-files | grep -q '^rsyslog\.service'; then
#   echo "Restarting rsyslog via systemctl..."
#   systemctl restart rsyslog || {
#     echo "systemctl restart failed (exit $?), falling back to service"
#     service rsyslog restart || echo "fallback restart also failed."
#   }
# else
#   echo "Restarting rsyslog via service..."
#   service rsyslog restart
# fi

echo "Restarting rsyslog..."
systemctl restart rsyslog 2>/dev/null || {
  echo "systemctl restart failed, falling back to service..."
  service rsyslog restart || echo "fallback restart also failed."
}