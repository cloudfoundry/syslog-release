<%

syslog_address = nil
syslog_port = nil
syslog_transport = nil

if_p('syslog.address', 'syslog.port', 'syslog.transport') do |address, port, transport|
  syslog_address = address
  syslog_port = port
  syslog_transport = transport
end.else do
  syslog_storer = link('syslog_storer')
  syslog_address = syslog_storer.instances[0].address
  syslog_port = syslog_storer.p('syslog.port')
  syslog_transport = syslog_storer.p('syslog.transport')
end

syslog_log_template = p('syslog.log_template')
%>

$ModLoad imuxsock                      # local message reception (rsyslog uses a datagram socket)
$MaxMessageSize 4k                     # default is 2k
$WorkDirectory /var/vcap/data/syslog_forwarder/buffered # where messages should be buffered on disk

<% if p('syslog.fallback_servers').length > 0 %>
<% raise 'only RELP and TCP protocols are supported for fallback servers (was UDP)' if syslog_transport == 'udp' %>
$ActionResumeRetryCount 2              # Try with a fallback server after 2 retries
$ActionQueueType Direct
<% else %>
$ActionResumeRetryCount -1             # Try until the server becomes available
$ActionQueueType LinkedList            # Allocate on-demand
<% end %>

$ActionQueueFileName           <%= p('syslog.queue_file_name') %>            # Spill to disk if queue is full (default: agg_backlog)
$ActionQueueMaxDiskSpace       <%= p('syslog.queue_max_disk_space') %>       # Max size for disk queue (default: 128m)
$ActionQueueSize               <%= p('syslog.queue_size') %>                 # Store no more than this number syslog messages in memory (default: 100000)
$ActionQueueDiscardMark        <%= p('syslog.queue_discard_mark') %>         # Purge messages of from memory whose severity is greater than or equal to DiscardSeverity (default: 97500)
$ActionQueueDiscardSeverity    <%= p('syslog.queue_discard_severity') %>     # This discards every message as soon as the discard mark is reached (default: 0)
$ActionQueueLowWaterMark       <%= p('syslog.queue_low_water_mark') %>       # Num messages. Assuming avg size of 512B, this is 1MiB. (default: 2000)
$ActionQueueHighWaterMark      <%= p('syslog.queue_high_water_mark') %>      # Num messages. Assuming avg size of 512B, this is 4MiB. (If this is reached, messages will spill to disk until the low watermark is reached). (default: 80000)
$ActionQueueTimeoutEnqueue     <%= p('syslog.queue_timeout_enqueue') %>      # Discard messages if the queue + disk is full (default: 0)
$ActionQueueCheckpointInterval <%= p('syslog.queue_checkpoint_interval') %>  # write bookkeeping information on checkpoints (every n records) (default: 100)
$ActionResumeInterval          <%= p('syslog.resume_interval') %>            # When action is suspended (dest not connected), retry after this number of seconds (default: 10)
$ActionQueueSaveOnShutdown     <%= p('syslog.queue_save_on_shutdown') ? 'on' : 'off' %>   # Save in-memory data to disk if rsyslog shuts down (default: on)

$ModLoad imudp
$UDPServerAddress 127.0.0.1
$UDPServerRun 514

template(name="BoshLogTemplate" type="list") {
  constant(value="<")
  property(name="pri")
  constant(value=">1")
  property(name="timestamp" dateFormat="rfc3339")
  constant(value=" <%= spec.address %> ")
  property(name="syslogtag")
<% if syslog_log_template == 'rfc5424' %>
  constant(value=" [bosh instance=\"<%= spec.deployment %>/<%= spec.job.name %>/<%= spec.id %>\"] ")
<% elsif syslog_log_template == 'legacy' %>
  constant(value=" <%= spec.deployment %>/<%= spec.job.name %>/<%= spec.id %> ")
<% elsif syslog_log_template == 'metron_agent' %>
  constant(value=" [job=<%= name %> index=<%= spec.index.to_i %>] ")
<% else %>
<% raise "only 'rfc5434', 'legacy' and 'metron_agent' log templates are supported (was '#{syslog_log_template}')" %>
<% end %>
  property(name="msg")
}

<%= p('syslog.custom_rule') %>

<% if p('syslog.tls_enabled') %>
  <%
    ca_cert_path = '/etc/ssl/certs/ca-certificates.crt'

    if_p('syslog.ca_cert') do
      ca_cert_path = '/var/vcap/jobs/syslog_forwarder/config/ca_cert.pem'
    end
  %>

$DefaultNetstreamDriverCAFile <%= ca_cert_path %>                 # trust these CAs
$ActionSendStreamDriver gtls                                      # use gtls netstream driver
$ActionSendStreamDriverMode 1                                     # require TLS
$ActionSendStreamDriverAuthMode x509/name                         # authenticate by hostname
$ActionSendStreamDriverPermittedPeer <%= p('syslog.permitted_peer') %>
<% end %>

<% if syslog_transport == 'relp' %>
$ModLoad omrelp
*.* :omrelp:<%= syslog_address %>:<%= syslog_port %>;BoshLogTemplate
<% elsif syslog_transport == 'udp' %>
*.* @<%= syslog_address %>:<%= syslog_port %>;BoshLogTemplate
<% elsif syslog_transport == 'tcp' %>
*.* @@<%= syslog_address %>:<%= syslog_port %>;BoshLogTemplate
<% else %>
<% raise "only RELP, UDP, and TCP protocols are supported (was '#{syslog_transport}')" %>
<% end %>

<% if p('syslog.fallback_servers').length > 0 %>
$ActionExecOnlyWhenPreviousIsSuspended on
    <% p('syslog.fallback_servers').each do |fallback_server| %>
        <%
          syslog_fallback_address = fallback_server.fetch('address')
          syslog_fallback_port = fallback_server.fetch('port')
          syslog_fallback_transport = fallback_server.fetch('transport')
        %>
        <% if syslog_fallback_transport == 'relp' %>
$ModLoad omrelp
:omrelp:<%= syslog_fallback_address %>:<%= syslog_fallback_port %>;BoshLogTemplate
        <% elsif syslog_fallback_transport == 'tcp' %>
& @@<%= syslog_fallback_address %>:<%= syslog_fallback_port %>;BoshLogTemplate
        <% else %>
          <% raise "only RELP, and TCP protocols are supported for fallback servers (was '#{syslog_fallback_transport}')" %>
        <% end %>
    <% end %>
$ActionExecOnlyWhenPreviousIsSuspended off
<% end %>

# Prevent vcap.* messsages from reaching anywhere else
:programname, startswith, "vcap." ~
